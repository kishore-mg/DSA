Mathematical Concepts:

Before jumping in, why do we require mathematical concepts?
 - The mathematical concepts will help in number theory, optimization, and bitwise manipulations, which are useful in many algorithms.

--------------------------------------------------------------------------------------------------------------------

1. Factorial Calculation (Recursive vs Iterative)

Formula
N = n * (n-1) * (n-2) * .... * 1

Example:
5! = 5 * 4 * 3 * 2 * 1 = 120

Can be solved in two ways:
1. Iterative approach
2. Recursive

Both the complexity O(n)

Iterative:

long FactorialIterative(int n) {
    long fact = 1;
    for (int i = 2; i <= n; i++) {
        fact *= i;
    }
    return fact;
}

Recursive:

long FactorialRecursive(int n) {
    if (n == 0 || n == 1) return 1;
    return n * FactorialRecursive(n - 1);
}

IMPORTANT: 
1. Iterative is preferred because recursion uses extra memory (stack calls).
2. However, recursion is useful for problems like backtracking and divide & conquer.

--------------------------------------------------------------------------------------------------------------------

2. HCF (GCD) and LCM

Highest Common Factor (Greater common divisor) is the highest number that divides both.
Least common multiple is the lowest number that is a multiple of both.

For 12 and 18. 
HCF = 6
LCM = 36

For LCM calculation
Method 1 

12 = 2 * 2 * 3
18 = 2 * 3 * 3

Highest power is 2 sq and 3 sq = 2 * 2 * 3 * 3 = 4 * 9 = 36

Method 2

LCM formula = a * b / HCF = 12 * 16 / 6 = 216 / 6  = 36

Method 3

List the mutliples of each number and take least common multiplier.


Euclidean Algorithm for GCD

gcd(a,b)=gcd(b,a%b)

int GCD(int a, int b) {
    if (b == 0) return a;
    return GCD(b, a % b);
}

Execution Flow:
GCD(12, 18) => 6
 - GCD (18, 12%18 = 12) => 6
  - GCD (12, 18%12 = 6) => 6
   - GCD (6, 12%6 = 6) => 6
    - GCD (6, 6%6 = 0) => 6


LCM Formula:
LCM(a,b)= ‚à£a√ób‚à£ / GCD(a,b) = 12 * 18 / 6 = 36

--------------------------------------------------------------------------------------------------------------------

3. Prime Numbers & Sieve of Eratosthenes

Basic approach
Check if n is divisible by any number from 2 to ‚àön.

bool IsPrime(int n) {
    if (n < 2) return false;
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0) return false;
    }
    return true;
}

Complexity -> O(n)


Sieve of Eratosthenes (Find All Primes Up to n)

void SieveOfEratosthenes(int n) {
    bool[] prime = new bool[n + 1];
    for (int i = 2; i <= n; i++) prime[i] = true;

    for (int p = 2; p * p <= n; p++) {
        if (prime[p]) {
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }

    for (int i = 2; i <= n; i++)
        if (prime[i]) Console.Write(i + " ");
}


Complexity -> O(n log n)

--------------------------------------------------------------------------------------------------------------------

4. Bitwise Operators

Operator	Name	    Example (a=5, b=3)	Binary Representation
&	        AND	        5 & 3 = 1	        101 & 011 = 001
|	        OR	        5 | 3 = 7	        101 | 011 = 111
^	        XOR	        5 ^ 3 = 6	        101 ^ 011 = 110
<<	        Left Shift	5 << 1 = 10	        101 << 1 = 1010
>>	        Right Shift	5 >> 1 = 2	        101 >> 1 = 010


--------------------------------------------------------------------------------------------------------------------

5. Fibonacci Series

F(n)=F(n‚àí1)+F(n‚àí2)

0, 1, 1, 2, 3, 5, 8, .....


1. Recursive Approach

Uses recursion to compute F(n).
Time Complexity: O(2‚Åø) (Exponential - very slow üòµ).
Space Complexity: O(n) (Because of recursion stack).
csharp
Copy
Edit
int FibonacciRecursive(int n) {
    if (n == 0) return 0;
    if (n == 1) return 1;
    return FibonacciRecursive(n - 1) + FibonacciRecursive(n - 2);
}


2. Iterative Approach (Efficient)

Time Complexity: O(n)
Space Complexity: O(1) (No extra space used).
csharp
Copy
Edit
int FibonacciIterative(int n) {
    if (n == 0) return 0;
    if (n == 1) return 1;
    int a = 0, b = 1, c;
    for (int i = 2; i <= n; i++) {
        c = a + b;
        a = b;
        b = c;
    }
    return b;
}


3. Fibonacci Using Dynamic Programming (Fastest)

Time Complexity: O(n)
Space Complexity: O(n)
csharp
Copy
Edit
int FibonacciDP(int n) {
    int[] dp = new int[n + 1];
    dp[0] = 0;
    dp[1] = 1;
    for (int i = 2; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2];
    }
    return dp[n];
}

--------------------------------------------------------------------------------------------------------------------
